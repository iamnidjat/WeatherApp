@model CompositeViewModel

@if (TempData["SuccessMessage"] != null)
{
    <div id="successMessage" class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}
else if (TempData["ErrorMessage"] != null)
{
    <div id="errorMessage" class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<body>
    <div>
        @if (User.Identity.IsAuthenticated)
        {
            <h3>@Localizer["User"]: @User.Identity.Name</h3>
        }
        else
        {
            <h3>@Localizer["Guest"]</h3>
        }
    </div>

    <div class="container">
        <form method="post">
            <div class="sub-container">
                <div class="form-group col-md-offset-3 col-md-5">
                    <h2>@Localizer["Search the weather forecast in a city"]</h2>
                    <label asp-for="@Model.SearchCityModel.CityName" style="font-family: Arial"></label>
                    <input asp-for="@Model.SearchCityModel.CityName" id="cityNameInput" class="form-control" />
                    <span asp-validation-for="@Model.SearchCityModel.CityName" class="text-danger"></span>
                    <div class="systems">
                        <div>
                            @Html.RadioButtonFor(m => m.SystemModel.Units, "metric", Model.SystemModel.Units == "metric" ? new { @checked = "checked" } : null)
                            <label asp-for="@Model.SystemModel.Units">@Localizer["Metric"]</label>
                            <span asp-validation-for="@Model.SystemModel.Units" class="text-danger"></span>
                        </div>
                        <div>
                            @Html.RadioButtonFor(m => m.SystemModel.Units, "imperial", Model.SystemModel.Units == "imperial" ? new { @checked = "checked" } : null)
                            <label asp-for="@Model.SystemModel.Units">@Localizer["Imperial"]</label>
                            <span asp-validation-for="@Model.SystemModel.Units" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="sub-container">
                <div class="form-group col-md-offset-3 col-md-5">
                    <button asp-controller="Forecast" asp-action="SearchCity" class="btn btn-primary">Search</button>
                    <button type="button" class="btn btn-primary" onclick="updateHref('search2Link', '@Url.Action("AdditionalData", "SunriseSunset")')">@Localizer["Get the sunrise/sunset data"]</button>
                    <a id="search2Link" style="display: none;"></a>
                    <button type="button" class="btn btn-primary" onclick="updateHref('search3Link', '@Url.Action("FullWeatherData", "Forecast")', '&dailyData=temperature_2m_max')">@Localizer["Get the full weather data"]</button>
                    <a id="search3Link" style="display: none;"></a>
                    <button type="button" class="btn btn-primary" onclick="updateHref('search5Link', '@Url.Action("FullWeatherData", "Forecast")', '&hourlyData=temperature_2m')">@Localizer["Get the full weather data2"]</button>
                    <a id="search5Link" style="display: none;"></a>
                    <button type="button" class="btn btn-primary" onclick="updateHref('search4Link', '@Url.Action("AirQuality", "Forecast")')">@Localizer["Get the air quality data"]</button>
                    <a id="search4Link" style="display: none;"></a>
                </div>
            </div>
        </form>

        <a href="@Url.Action("Index", "AirQuality")">@Localizer["Go to Air Quality"]</a>
        <a href="@Url.Action("Index", "SunriseSunset")">@Localizer["Go to Sunrise/Sunset"]</a>

        <h2>@Localizer["Searched Cities"]:</h2>
        @if (Model.SearchedCities != null && Model.SearchedCities.Any())
        {
            <ul>
                @foreach (var city in Model.SearchedCities)
                {
                    <li>
                        @if (!string.IsNullOrEmpty(city.Name))
                        {
                            <a href="@Url.Action("City", "Forecast", new { city = city.Name, system = city.System })">@city.Name</a>
                            <span>@city.Date?.ToString("yyyy-MM-dd HH:mm")</span>
                            <button class="removeCityButton" data-city="@city.Name">X</button>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p>@Localizer["No cities have been searched yet"]</p>
        }
    </div>
</body>

@section Styles
{
    <link href="~/css/search-city.css" type="text/css" rel="stylesheet" />
}

@section Scripts
{
    <script src="~/js/city-management.js"></script>

    <script type="text/javascript">
        const locationIQApiKey = '@ViewData["LocationIQApiKey"]';

        function updateHref(linkId, actionUrl, extraParams = '') {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    const link = document.getElementById(linkId);
                    link.href = `${actionUrl}?latitude=${latitude}&longitude=${longitude}${extraParams}`;
                    link.click();
                }, showError);
            } else {
                document.getElementById("demo").innerHTML = "Geolocation is not supported by this browser.";
            }
        }

        function showError(error) {
            let errorMessage = '';
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = "User denied the request for Geolocation.";
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = "Location information is unavailable.";
                    break;
                case error.TIMEOUT:
                    errorMessage = "The request to get user location timed out.";
                    break;
                case error.UNKNOWN_ERROR:
                    errorMessage = "An unknown error occurred.";
                    break;
            }
            console.error(errorMessage);
            document.getElementById("cityNameInput").value = "Unable to fetch location";
        }

        function fetchCityName(latitude, longitude) {
            fetch(`https://us1.locationiq.com/v1/reverse.php?key=${locationIQApiKey}&lat=${latitude}&lon=${longitude}&format=json`)
                .then(response => response.json())
                .then(data => {
                    const cityName = data.address.city || data.address.town || data.address.village || "Unknown location";
                    document.getElementById("cityNameInput").value = cityName;
                })
                .catch(error => {
                    console.error('Error fetching city name:', error);
                    document.getElementById("cityNameInput").value = "Unable to fetch city name";
                });
        }

        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    fetchCityName(latitude, longitude);
                }, showError);
            } else {
                console.error("Geolocation is not supported by this browser.");
                document.getElementById("cityNameInput").value = "Geolocation not supported";
            }
        }

        // Call getLocation on page load
        window.onload = getLocation;

        setTimeout(() => {
            document.getElementById('successMessage').classList.add('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
        }, 10000); // 10 seconds
    </script>
}
